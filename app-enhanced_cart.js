class Cart {
    constructor() {
        if (Cart.instance) {
            return Cart.instance;
        }
        
        this.items = this.loadFromStorage();
        Cart.instance = this;
        
        return this;
    }
    
    loadFromStorage() {
        const saved = localStorage.getItem('cart');
        return saved ? JSON.parse(saved) : [];
    }
    
    saveToStorage() {
        localStorage.setItem('cart', JSON.stringify(this.items));
    }
    
    addItem(product, quantity = 1) {
        const existingItem = this.items.find(item => item.id === product.id);
        
        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            this.items.push({
                ...product,
                quantity: quantity
            });
        }
        
        this.saveToStorage();
        this.updateCartDisplay();
        this.showNotification(`"${product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
    }
    
    removeItem(productId) {
        this.items = this.items.filter(item => item.id !== productId);
        this.saveToStorage();
        this.updateCartDisplay();
    }
    
    updateQuantity(productId, quantity) {
        const item = this.items.find(item => item.id === productId);
        if (item) {
            if (quantity <= 0) {
                this.removeItem(productId);
            } else {
                item.quantity = quantity;
                this.saveToStorage();
                this.updateCartDisplay();
            }
        }
    }
    
    clear() {
        this.items = [];
        this.saveToStorage();
        this.updateCartDisplay();
    }
    
    getTotalCount() {
        return this.items.reduce((total, item) => total + item.quantity, 0);
    }
    
    getTotalPrice() {
        return this.items.reduce((total, item) => total + (item.price * item.quantity), 0);
    }
    
    getItems() {
        return [...this.items];
    }
    
    updateCartDisplay() {
        const cartCount = document.querySelector('.cart-count');
        if (cartCount) {
            cartCount.textContent = this.getTotalCount();
        }
    }
    
    showNotification(message) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = 'success';
        notification.textContent = message;
        notification.style.position = 'fixed';
        notification.style.top = '20px';
        notification.style.right = '20px';
        notification.style.zIndex = '1000';
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
}

class EnhancedSPA {
    constructor() {
        this.cart = new Cart();
        this.products = [
            {
                id: 1,
                name: '–ò–≥—Ä–æ–≤–æ–π –Ω–æ—É—Ç–±—É–∫',
                price: 50000,
                image: 'üíª',
                description: '–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –∏–≥—Ä —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º Intel Core i7'
            },
            {
                id: 2,
                name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω',
                price: 25000,
                image: 'üì±',
                description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å –æ—Ç–ª–∏—á–Ω–æ–π –∫–∞–º–µ—Ä–æ–π 48 –ú–ü'
            },
            {
                id: 3,
                name: '–ü–ª–∞–Ω—à–µ—Ç',
                price: 35000,
                image: 'üìü',
                description: '–õ–µ–≥–∫–∏–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω—à–µ—Ç —Å –¥–∏–∞–≥–æ–Ω–∞–ª—å—é 10 –¥—é–π–º–æ–≤'
            },
            {
                id: 4,
                name: '–ù–∞—É—à–Ω–∏–∫–∏',
                price: 15000,
                image: 'üéß',
                description: '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º'
            },
            {
                id: 5,
                name: '–£–º–Ω—ã–µ —á–∞—Å—ã',
                price: 12000,
                image: '‚åö',
                description: '–£–º–Ω—ã–µ —á–∞—Å—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–Ω–æ–º'
            },
            {
                id: 6,
                name: '–§–æ—Ç–æ–∫–∞–º–µ—Ä–∞',
                price: 45000,
                image: 'üì∑',
                description: '–ó–µ—Ä–∫–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—ä–µ–º–∫–∏'
            }
        ];
        
        this.pages = {
            'home': { 
                url: '#home', 
                title: '–ì–ª–∞–≤–Ω–∞—è - –ú–∞–≥–∞–∑–∏–Ω SPA',
                content: this.renderHome.bind(this)
            },
            'products': { 
                url: '#products', 
                title: '–¢–æ–≤–∞—Ä—ã - –ú–∞–≥–∞–∑–∏–Ω SPA',
                content: this.renderProducts.bind(this)
            },
            'cart': { 
                url: '#cart', 
                title: '–ö–æ—Ä–∑–∏–Ω–∞ - –ú–∞–≥–∞–∑–∏–Ω SPA',
                content: this.renderCart.bind(this)
            },
            'about': { 
                url: '#about', 
                title: '–û –Ω–∞—Å - –ú–∞–≥–∞–∑–∏–Ω SPA',
                content: this.renderAbout.bind(this)
            },
            'contact': { 
                url: '#contact', 
                title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã - –ú–∞–≥–∞–∑–∏–Ω SPA', 
                content: this.renderContact.bind(this)
            }
        };
        
        this.init();
    }
    
    async init() {
        this.setupNavigation();
        await this.loadInitialPage();
        this.setupHistory();
        this.cart.updateCartDisplay();
    }
    
    setupNavigation() {
        document.addEventListener('click', (e) => {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (e.target.matches('nav a') || e.target.closest('nav a')) {
                e.preventDefault();
                const link = e.target.closest('a');
                const pageId = link.getAttribute('data-page');
                this.navigateTo(pageId);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ä–∑–∏–Ω–µ
            if (e.target.closest('.cart-info')) {
                e.preventDefault();
                this.navigateTo('cart');
            }
        });
    }
    
    async navigateTo(pageId) {
        if (this.pages[pageId]) {
            await this.renderPage(pageId);
            this.updateHistory(pageId);
        } else {
            await this.renderPage('home');
        }
    }
    
    async renderPage(pageId) {
        const page = this.pages[pageId];
        
        if (!page) {
            this.showError(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return;
        }
        
        this.showLoading();
        
        try {
            let content;
            
            if (typeof page.content === 'function') {
                content = await page.content();
            } else {
                content = await new Promise(resolve => {
                    setTimeout(() => resolve(page.content), 300);
                });
            }
            
            document.getElementById('app-content').innerHTML = content;
            document.title = page.title;
            this.updateActiveNav(pageId);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
            this.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
        }
    }
    
    updateActiveNav(pageId) {
        document.querySelectorAll('nav a').forEach(link => {
            const isActive = link.getAttribute('data-page') === pageId;
            link.classList.toggle('active', isActive);
        });
    }
    
    updateHistory(pageId) {
        const page = this.pages[pageId];
        if (page) {
            window.history.pushState({ pageId }, page.title, page.url);
        }
    }
    
    setupHistory() {
        window.addEventListener('popstate', (e) => {
            const pageId = e.state?.pageId || this.getCurrentPage() || 'home';
            this.renderPage(pageId);
        });
    }
    
    showLoading() {
        document.getElementById('app-content').innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
    }
    
    showError(message) {
        document.getElementById('app-content').innerHTML = `<div class="error">${message}</div>`;
    }
    
    async loadInitialPage() {
        const initialPage = this.getCurrentPage() || 'home';
        await this.renderPage(initialPage);
    }
    
    getCurrentPage() {
        const hash = window.location.hash.substring(1);
        return hash in this.pages ? hash : null;
    }
    
    // –ú–µ—Ç–æ–¥—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    renderHome() {
        return `
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!</h2>
            <p>–≠—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.</p>
            
            <div style="margin: 2rem 0; padding: 2rem; background: #f8f9fa; border-radius: 8px;">
                <h3>üî• –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h3>
                <ul style="margin: 1rem 0; padding-left: 2rem;">
                    <li>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É</li>
                    <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤</li>
                    <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage</li>
                    <li>–ö—Ä–∞—Å–∏–≤—ã–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</li>
                    <li>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏</li>
                </ul>
            </div>
            
            <button onclick="app.navigateTo('products')" 
                    style="padding: 1rem 2rem; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 1.1rem;">
                üõçÔ∏è –ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏
            </button>
        `;
    }
    
    renderProducts() {
        const productsHTML = this.products.map(product => `
            <div class="product">
                <div style="font-size: 3rem; text-align: center; margin-bottom: 1rem;">${product.image}</div>
                <h3>${product.name}</h3>
                <p>${product.description}</p>
                <div class="product-price">${product.price.toLocaleString()} —Ä—É–±.</div>
                <button onclick="app.addToCart(${product.id})">
                    üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                </button>
            </div>
        `).join('');
        
        return `
            <h2>–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã</h2>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É:</p>
            <div class="products">
                ${productsHTML}
            </div>
        `;
    }
    
    renderCart() {
        const items = this.cart.getItems();
        
        if (items.length === 0) {
            return `
                <h2>üõí –ö–æ—Ä–∑–∏–Ω–∞</h2>
                <div class="empty-cart">
                    <div style="font-size: 4rem; margin-bottom: 1rem;">üì≠</div>
                    <h3>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞</p>
                    <button onclick="app.navigateTo('products')" 
                            style="margin-top: 1rem; padding: 1rem 2rem; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º
                    </button>
                </div>
            `;
        }
        
        const itemsHTML = items.map(item => `
            <div class="cart-item">
                <div class="cart-item-info">
                    <div style="font-size: 2rem;">${item.image}</div>
                    <div>
                        <h4>${item.name}</h4>
                        <p>${item.price.toLocaleString()} —Ä—É–±. √ó ${item.quantity} = ${(item.price * item.quantity).toLocaleString()} —Ä—É–±.</p>
                    </div>
                </div>
                <div class="cart-item-controls">
                    <button onclick="app.updateCartItem(${item.id}, ${item.quantity - 1})">-</button>
                    <span>${item.quantity}</span>
                    <button onclick="app.updateCartItem(${item.id}, ${item.quantity + 1})">+</button>
                    <button onclick="app.removeFromCart(${item.id})" style="margin-left: 1rem; color: #dc3545;">üóëÔ∏è</button>
                </div>
            </div>
        `).join('');
        
        return `
            <h2>üõí –ö–æ—Ä–∑–∏–Ω–∞</h2>
            
            <div class="cart-items">
                ${itemsHTML}
            </div>
            
            <div class="cart-total">
                –ò—Ç–æ–≥–æ: ${this.cart.getTotalPrice().toLocaleString()} —Ä—É–±.
            </div>
            
            <div class="cart-actions">
                <button class="btn-secondary" onclick="app.clearCart()">
                    –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
                </button>
                <button class="btn-primary" onclick="app.checkout()">
                    –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                </button>
            </div>
        `;
    }
    
    renderAbout() {
        return `
            <h2>–û –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ</h2>
            <p>–ú—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.</p>
            
            <div style="margin-top: 2rem;">
                <h3>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</h3>
                <ul style="margin: 1rem 0; padding-left: 2rem;">
                    <li>–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</li>
                    <li>–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</li>
                    <li>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</li>
                    <li>–£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</li>
                </ul>
            </div>
        `;
    }
    
    renderContact() {
        return `
            <h2>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h2>
            
            <div style="display: grid; gap: 2rem; margin-top: 2rem;">
                <div>
                    <h3>üìû –¢–µ–ª–µ—Ñ–æ–Ω</h3>
                    <p>+7 (999) 123-45-67</p>
                </div>
                
                <div>
                    <h3>üìß Email</h3>
                    <p>example@mail.com</p>
                </div>
                
                <div>
                    <h3>üè¢ –ê–¥—Ä–µ—Å</h3>
                    <p>–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123</p>
                </div>
                
                <div>
                    <h3>üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</h3>
                    <p>–ü–Ω-–ü—Ç: 9:00-18:00<br>–°–±-–í—Å: 10:00-16:00</p>
                </div>
            </div>
        `;
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    addToCart(productId) {
        const product = this.products.find(p => p.id === productId);
        if (product) {
            this.cart.addItem(product);
        }
    }
    
    removeFromCart(productId) {
        this.cart.removeItem(productId);
        // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –µ—ë
        if (this.getCurrentPage() === 'cart') {
            this.renderPage('cart');
        }
    }
    
    updateCartItem(productId, quantity) {
        this.cart.updateQuantity(productId, quantity);
        // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –µ—ë
        if (this.getCurrentPage() === 'cart') {
            this.renderPage('cart');
        }
    }
    
    clearCart() {
        this.cart.clear();
        this.renderPage('cart');
    }
    
    checkout() {
        if (this.cart.getTotalCount() === 0) {
            alert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
            return;
        }
        
        const total = this.cart.getTotalPrice();
        const count = this.cart.getTotalCount();
        
        if (confirm(`–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ ${total.toLocaleString()} —Ä—É–±. (${count} —Ç–æ–≤–∞—Ä–æ–≤)?`)) {
            alert('üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!');
            this.cart.clear();
            this.renderPage('cart');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.app = new EnhancedSPA();
});
